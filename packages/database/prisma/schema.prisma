// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma-client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt    @id @default(autoincrement())
  email     String    @unique
  name      String?
  avatar    String?
  password  String
  gender    GENDER    @default(UNKNOWN)
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  @@map("users")
}

model Member {
  id             BigInt    @id @default(autoincrement())
  email          String    @unique
  name           String?
  avatar         String?
  password       String
  gender         GENDER    @default(UNKNOWN)
  address        String?
  accountBalance Json?
  status         Int       @default(0)
  type           Int       @default(0)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @map("updated_at")
  // 余额
  balance        Decimal   @default(0) @db.Decimal(20, 5)
  // 冻结余额
  unBalance      Decimal   @default(0) @map("un_balance") @db.Decimal(20, 5)
  // 锁定余额
  lockBalance    Decimal   @default(0) @map("lock_balance") @db.Decimal(20, 5)

  stockPostion    StockPosition[]
  memberDetail    MemberDetail[]
  memberSubscribe MemberSubscribe[]
  memberRecharges MemberRecharge[]
  memberWithdraws MemberWithdraw[]
  memberCards     MemberCard[]
  recharges       Recharge[]
  withdraws       Withdraw[]

  @@map("members")
}

model MemberRecharge {
  id            BigInt  @id @default(autoincrement())
  money         Decimal @db.Decimal(20, 5)
  rechargeMoney Decimal @default(0) @map("recharge_money") @db.Decimal(20, 5)
  screen        Json
  market        String
  status        Int     @default(0)

  memberId  BigInt    @map("member_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  member Member @relation(fields: [memberId], references: [id])

  @@map("member_recharges")
}

model MemberWithdraw {
  id        BigInt    @id @default(autoincrement())
  money     Decimal   @db.Decimal(20, 5)
  remark    String?
  status    Int       @default(0)
  address   String?
  market    String
  memberId  BigInt    @map("member_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  member Member @relation(fields: [memberId], references: [id])

  @@map("member_withdraws")
}

model StockSymbol {
  id             BigInt  @id @default(autoincrement())
  // 系统CODE
  code           String
  // 证券市场
  market         String
  // 上线状态
  online         Int     @default(1)
  // 证券代码
  symbol         String
  // 证券名称
  showName       String
  name           String?
  symbolShowName String? @map("symbol_show_name")
  trade          Int     @default(0)
  // 证券类型 0 指数 1 证股 2 ETF
  type           Int     @default(0)
  // 最新价
  newPrice       String? @map("new_price") @db.VarChar(200)
  // 开盘价
  open           String? @default("0.000") @db.VarChar(200)
  // 收盘价
  close          String? @default("0.000") @db.VarChar(200)
  // 最高
  high           String? @default("0.000") @db.VarChar(200)
  // 最低
  low            String? @default("0.000") @db.VarChar(200)
  // 成交量
  amount         String? @default("0.000") @db.VarChar(200)
  // 成交额
  volume         String? @default("0.000") @db.VarChar(200)

  change        String? @default("0")
  changePercent String? @default("0")

  date       String?
  sync       Json?
  syncMarket String    @map("sync_market")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  stockPostion StockPosition[]

  @@unique([symbol, market])
  @@map("stock_symbols")
}

model Stock {
  id            BigInt       @id @default(autoincrement())
  code          String       @db.VarChar(100)
  symbol        String       @db.VarChar(100)
  name          String       @db.VarChar(100)
  cname         String?      @db.VarChar(100)
  type          String       @db.VarChar(20)
  logo          String?      @db.VarChar(200)
  sok           String?      @db.VarChar(30)
  optional      Boolean      @default(false)
  // 最新价
  newPrice      String?      @default("0") @map("new_price") @db.VarChar(200)
  // 开盘价
  open          String?      @default("0") @db.VarChar(200)
  // 收盘价
  close         String?      @default("0") @db.VarChar(200)
  // 最高
  high          String?      @default("0") @db.VarChar(200)
  // 最低
  low           String?      @default("0") @db.VarChar(200)
  // 成交量
  amount        String?      @default("0") @db.VarChar(200)
  // 成交额
  volume        String?      @default("0") @db.VarChar(200)
  status        STOCK_STATUS @default(NORMAL)
  change        String?      @default("0")
  changePercent String?      @default("0%")
  date          String?
  extra         Json?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime?    @map("updated_at")

  stockRecord StockRecord[]

  @@unique([code, symbol, type])
  @@map("stocks")
}

model StockRecord {
  id       BigInt @id @default(autoincrement())
  // 最新价
  newPrice String @map("new_price") @db.VarChar(200)
  // 开盘价
  open     String @db.VarChar(200)
  // 收盘价
  close    String @db.VarChar(200)
  // 最高
  high     String @db.VarChar(200)
  // 最低
  low      String @db.VarChar(200)
  // 成交量
  amount   String @db.VarChar(200)
  // 成交额
  volume   String @db.VarChar(200)

  date      String
  extra     Json
  // 时间
  createdAt DateTime @default(now()) @map("created_at")

  stockId BigInt @map("stock_id")
  stock   Stock  @relation(fields: [stockId], references: [id])

  @@map("stock_records")
}

model StockMarket {
  id             BigInt    @id @default(autoincrement())
  // 市场标识
  code           String?
  // 市场交易货币
  currency       String?
  showName       String?
  // 最大出金
  maxWithdrawal  String?   @map("max_withdrawal")
  // 最小出金
  minWithdrawal  String?   @map("min_withdrawal")
  // 手续费率
  feeRate        String?   @map("fee_rate")
  // 最低手续费
  minFee         String?   @map("min_fee")
  // 杠杆倍数
  lever          String?
  // 维持保证金率
  mmr            String?
  // 配资费率
  allocationRate String?   @map("allocation_rate")
  // 下单频率
  frequency      Int?
  // 限制时间/秒
  bindingHours   Int?      @map("binding_hours")
  // 市场头部证券
  headSymbols    String?   @map("head_symbols")
  // 排序
  sort           Int?      @default(0)
  // 市场是否上线
  online         Int?      @default(1)
  // 货币是否上线
  conline        Int?      @default(1)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @map("updated_at")

  @@map("stock_markets")
}

model StockFavorite {
  id       BigInt @id @default(autoincrement())
  // 最新价
  newPrice String @map("new_price") @db.VarChar(200)
  // 开盘价
  open     String @db.VarChar(200)
  // 收盘价
  close    String @db.VarChar(200)
  // 最高
  high     String @db.VarChar(200)
  // 最低
  low      String @db.VarChar(200)
  // 成交量
  amount   String @db.VarChar(200)
  // 成交额
  volume   String @db.VarChar(200)

  date  String?
  extra Json?

  memberId      BigInt @map("member_id")
  stockSymbolId BigInt @map("stock_symbol_id")

  // 时间
  createdAt DateTime @default(now()) @map("created_at")

  @@map("stock_favorites")
}

model StockSubscribe {
  id                BigInt    @id @default(autoincrement())
  // 市场
  market            String
  // 股票名称
  name              String
  // 股票代码
  code              String
  // 开始认购时间
  startAt           DateTime? @map("start_at")
  // 结束认购时间
  endAt             DateTime? @map("end_at")
  // 上市时间
  upAt              DateTime? @map("up_at")
  // 发行量
  circulation       Int?
  // 剩余发行量
  remainCirculation Int?      @map("remain_circulation")
  // 发行价
  ipoPrice          Decimal   @map("ipo_price") @db.Decimal(20, 5)
  // 招股价
  issuePrice        Decimal   @map("issue_price") @db.Decimal(20, 5)
  // 公布结果时间
  resultAt          DateTime? @map("result_at")
  // 认购数量价格
  subAmount         Json?     @map("sub_amount")
  // 状态
  status            Int       @default(1)
  type              Int       @default(0)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime? @map("updated_at")

  @@map("stock_subscribes")
}

model MemberSubscribe {
  id                BigInt   @id @default(autoincrement())
  market            String
  code              String
  name              String
  // 申购数量
  amount            Int
  // 申购金额
  money             Decimal  @db.Decimal(20, 5)
  // 申购单号
  no                String
  // 中签数量
  winningAmount     Int?     @map("winning_amount")
  // 中签价格
  winningPrice      Decimal? @map("winning_price") @db.Decimal(20, 5)
  // 中签总额
  totalWinningPrice Decimal? @map("total_winning_price") @db.Decimal(20, 5)
  // 实际金额
  actualAmount      Decimal? @map("actual_amount") @db.Decimal(20, 5)
  // 订单状态
  status            Int      @default(1)
  // 中间状态
  type              Int      @default(0)
  // 是否已持仓
  position          Int      @default(0)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  stockSubscribeId BigInt @map("stock_subscribe_id")

  memberId BigInt @map("member_id")
  member   Member @relation(fields: [memberId], references: [id])

  @@map("member_subscribes")
}

model StockPosition {
  id         BigInt  @id @default(autoincrement())
  // 持仓数量
  amount     Int
  // 预估爆仓价
  blast      String
  // 持仓均价
  price      String
  // 交易模式
  mode       Int
  // 持仓状态
  status     Int
  // 保证金
  bond       String?
  // 单号
  identifier String?
  // 杠杆
  lever      String? @default("1")
  // 止损
  stopLoss   String?
  // 止盈
  takeProfit String?
  // 市场
  market     String?

  // 类型
  type Int

  // 损益
  pl   String? @default("0")
  // 损益率
  rate String? @default("0")

  currentPrice String? @map("current_price")

  memberId      BigInt @map("member_id")
  stockSymbolId BigInt @map("stock_symbol_id")

  member      Member      @relation(fields: [memberId], references: [id])
  stockSymbol StockSymbol @relation(fields: [stockSymbolId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  @@map("stock_positions")
}

model MemberDetail {
  id       BigInt  @id @default(autoincrement())
  after    String?
  amount   String?
  before   String?
  market   String?
  type     Int
  remark   String?
  memberId BigInt  @map("member_id")
  member   Member  @relation(fields: [memberId], references: [id])

  @@map("member_details")
}

model MemberCard {
  id        BigInt       @id @default(autoincrement())
  name      String?
  type      RechargeType
  detail    Json
  memberId  BigInt       @map("member_id")
  member    Member       @relation(fields: [memberId], references: [id])
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime?    @map("updated_at")

  @@map("member_cards")
}

model Country {
  id        BigInt    @id @default(autoincrement())
  code      String?   @db.Char(30)
  name      String    @db.VarChar(60)
  en        String    @db.VarChar(60)
  tel       String    @db.Char(10)
  py        String    @db.Char(30)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  @@unique([py, tel, name])
  @@map("countries")
}

model Setting {
  id        BigInt    @id @default(autoincrement())
  key       String
  value     String    @db.Text()
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  @@map("settings")
}

model StockResource {
  id             BigInt    @id @default(autoincrement())
  amountScope    String    @map("amount_scope")
  frequencyScope String    @map("frequency_scope")
  market         String    @map("market")
  spreadScope    String    @map("spread_scope")
  endAt          String    @map("end_at")
  startAt        String    @map("start_at")
  symbol         String
  type           Int       @default(1)
  status         Int       @default(1)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @map("updated_at")

  @@map("stock_resources")
}

model StockResourceRecord {
  id              BigInt @id @default(autoincrement())
  open            String
  high            String
  close           String
  low             String
  time            String
  stockResourceId BigInt @map("stock_resource_id")

  @@map("stock_resource_records")
}

enum GENDER {
  UNKNOWN
  MAN
  WOMAN
}

enum STOCK_STATUS {
  NORMAL
  DISABLE
  DOWN
}

model Article {
  id           BigInt    @id @default(autoincrement())
  thumb        String    @db.VarChar(250)
  title        String    @db.VarChar(250)
  market       String?
  crawlerThumb String?   @map("crawler_thumb") @db.VarChar(250)
  source       String?   @db.VarChar(250)
  content      String    @db.LongText
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @map("updated_at")

  @@map("articles")
}

model Recharge {
  id             BigInt       @id @default(autoincrement())
  // 市场
  market         String
  // 金额
  money          Decimal      @db.Decimal(20, 5)
  // 充值类型
  type           RechargeType
  // 充值币种
  account        String
  // 充值网络
  accountNetwork String       @map("account_network")
  // 截图
  screens        Json
  // 审核状态
  status         Int          @default(0)
  passMoney      Decimal      @default(0) @map("pass_money") @db.Decimal(20, 5)
  convertMoney   Decimal      @default(0) @map("convert_money") @db.Decimal(20, 5)

  memberId  BigInt    @map("member_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  member Member @relation(fields: [memberId], references: [id])

  @@map("recharges")
}

model Withdraw {
  id            BigInt       @id @default(autoincrement())
  // 市场
  market        String
  // 金额
  money         Decimal      @db.Decimal(20, 5)
  // 提现类型
  type          RechargeType
  // 提现币种
  currency      String
  cryptoType    String?      @map("crypto_type")
  cryptoNetwork String?      @map("crypto_network")
  card          Json?
  convertMoney  Decimal      @default(0) @map("convert_money") @db.Decimal(20, 5)
  // 审核状态
  status        Int          @default(0)
  memberId      BigInt       @map("member_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime?    @map("updated_at")

  member Member @relation(fields: [memberId], references: [id])

  @@map("withdraws")
}

enum RechargeType {
  CARD
  CRYPTO
}

model RechargeAccount {
  id             BigInt    @id @default(autoincrement())
  account        String
  accountAddress String    @map("account_address")
  currency       String
  max            Decimal   @default(0) @db.Decimal(20, 5)
  min            Decimal   @default(0) @db.Decimal(20, 5)
  status         Int       @default(0)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @map("updated_at")

  @@map("recharge_accounts")
}
